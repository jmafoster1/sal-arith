sequence {XB : TYPE; xb : XB, max : NATURAL} : CONTEXT =
BEGIN

%% The sequence context, which models Z sequences as total SAL functions
%% from the positive natural numbers to elements, using a bottom element
%% to represent unused indices.  Sequences must be declared with a fixed
%% max length, and use xb as the bottom element.  This context defines only
%% the additional sequence operations; other function and set operations
%% are defined in the function context.

%% A sequence is identical to a function, whose domain type is Index, a
%% subrange from 0..(max-1), and whose range type is XB, which extends the type
%% X with a bottom element xb.

%% Version revised by A J H Simons on 1 September 2011.
%% Version revised by J M A Foster on 19 November 2019.

%% Local types - do not export; for internal use within this context only.

	Index : TYPE = [0..max];

%% Exported type - use only if you don't want to apply operations from the
%% function context as well.  If you do, use the base type [Index -> XB].

	Sequence : TYPE = [Index -> XB];

%% Calculate the length of a sequence.  This recursive definition seems
%% to succeed because SAL can determine an upper limit to the recursions.

	sizeAux (seq : Sequence, i : Index) : Index =
		IF seq(i) = xb AND (FORALL (ia: Index): ia > i => seq(ia) = xb) THEN i
		ELSIF i >= max AND seq(i) = xb THEN max
		ELSIF i >= max THEN max + 1
		ELSE sizeAux(seq, i+1) ENDIF;

	size? (seq : Sequence) : Index = sizeAux(seq, 0);

	%% Sequence constructors.  An empty sequence is a function where every index
	%% maps to the undefined element.

		empty : Sequence = LAMBDA (n : Index) : xb;

		assign (seq : Sequence, key : Index, val : XB) : Sequence =
			LAMBDA (i : Index) : IF i = key THEN val ELSE seq(i) ENDIF;

		% insert (val : XB, seq : Sequence) : Sequence = assign(seq, size?(seq), val);
		insert (val : XB, seq : Sequence) : Sequence =
			LAMBDA (i : Index) : IF i = 0 THEN val ELSE seq(i-1) ENDIF;


END
